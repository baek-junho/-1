library(tidyverse)
bank <- read.csv(file = 'https://bit.ly/universal_bank')
glimpse(bank)
str(object = bank)
summary(bank)
bank <- bank %>% select(-ID, -ZIP.Code) %>% filter(Experience>=0)

bank[,c(6,8:12)] <- map_df(.x = bank[,c(6,8:12)], .f = as.factor)

summary(bank)
bank$PersonalLoan %>% table() %>% prop.table()

set.seed(seed = 1234)
n <- nrow(bank)
index <- sample(x = n, size = n*0.7, replace = FALSE)
trainSet <- bank %>% slice(index)
testSet <- bank %>% slice(-index)

trainSet$PersonalLoan %>% table() %>% prop.table()
testSet$PersonalLoan %>% table() %>% prop.table()

getwd()
setwd(dir = './data')

save(list = c('bank', 'trainSet', 'testSet'), file = 'Bank_Dataset.RDA')

library(rpart)
set.seed(seed = 1234)
fitC <- rpart(formula = PersonalLoan ~., data = trainSet, control = rpart.control(minsplit = 20,
                                                                                 cp = 0.01,
                                                                                 maxdepth = 10))
summary(object = fitC)

# CP          nsplit  rel error    xerror       xstd
# 1 0.32890855      0 1.0000000 1.0000000 0.05158571
# 2 0.15044248      2 0.3421829 0.3569322 0.03187645
# 3 0.01622419      3 0.1917404 0.2064897 0.02442952
# 4 0.01000000      7 0.1268437 0.1622419 0.02170227 ## 여기가 현재인데 맨아래가 최소인지를 확인 xerror이
# 
# Variable importance
# Education    Income    Family     CCAvg CDAccount  Mortgage 
# 31        25        19        13         8         3 
# 
# Node number 1: 3463 observations,    complexity param=0.3289086
# predicted class=0  expected loss=0.097892  P(node) =1
# class counts:  3124   339  # 대출받은사람 3124.
# probabilities: 0.902 0.098 # 기대되는손실 위에 loss
# left son=2 (2814 obs) right son=3 (649 obs)
# 
# Primary splits:
#    Income    < 114.5 to the left,  improve=174.43720, (0 missing)   
#    CCAvg     < 2.95  to the left,  improve=112.66630, (0 missing)
#    CDAccount splits as  LR,        improve= 63.27239, (0 missing)
#    Mortgage  < 280.5 to the left,  improve= 24.61372, (0 missing)
#    Education splits as  LRR,       improve= 12.09844, (0 missing)
# Surrogate splits:
#    CCAvg     < 4.05  to the left,  agree=0.882, adj=0.368, (0 split)
#    Mortgage  < 336.5 to the left,  agree=0.831, adj=0.099, (0 split)
# 
# Node number 2: 2814 observations,    complexity param=0.01622419
# predicted class=0  expected loss=0.02167733  P(node) =0.8125902
# class counts:  2753    61
# probabilities: 0.978 0.022 
# left son=4 (2603 obs) right son=5 (211 obs)
# Primary splits:
#   CCAvg     < 2.95  to the left,  improve=24.0301300, (0 missing)
# Income    < 92.5  to the left,  improve=10.7713300, (0 missing)
# CDAccount splits as  LR,        improve= 2.7071940, (0 missing)
# Mortgage  < 281   to the left,  improve= 1.4944100, (0 missing)
# Age       < 64.5  to the left,  improve= 0.2326869, (0 missing)
# 
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(x = fitC,type = 2, extra = 101, fallen.leaves = FALSE)
rpart.plot(x = fitC,type = 2, extra = 106, fallen.leaves = TRUE)

printcp(fitC)
plotcp(x = fitC)


set.seed(seed = 1234)
fitC <- rpart(formula = PersonalLoan ~., data = trainSet, control = rpart.control(minsplit = 10,
                                                                                  cp = 0.001,
                                                                                  maxdepth = 30))
printcp(x = fitC)
plotcp(x = fitC)

fitP <- prune.rpart(tree = fitC,cp = 0.0098)
rpart.plot(x = fitC,type = 2, extra = 101, fallen.leaves = FALSE)
rpart.plot(x = fitP,type = 2, extra = 101, fallen.leaves = FALSE)


real <- testSet$PersonalLoan
predC <- predict(object = fitC, newdata = testSet, type = 'class')
predP <- predict(object = fitP, newdata = testSet, type = 'class')


print(x = real)
print(x = predC)
print(x = predP)


library(caret)
confusionMatrix(data = predC, reference = real, positive = '1')

library(MLmetrics)
F1_Score(y_true = real, y_pred = predC, positive = '1')

confusionMatrix(data = predP, reference = real, positive = '1')
F1_Score(y_true = real, y_pred = predP, positive = '1')


probC <- predict(object = fitC, newdata = testSet, type = 'prob')
probC <- probC[,2]

library(pROC)
roc(response= real, predictor = probC) %>% 
  plot(main = "ROC 곡선선")


probP <- predict(object = fitP, newdata = testSet, type = 'prob')
probP <- probP[,2]

roc(response= real, predictor = probP) %>% 
  plot(col = 'red', lwd = 2, add= TRUE)


auc(response= real, predictor = probC)
auc(response= real, predictor = probP)

getwd()
saveRDS(object=fitP, file='DecisionTree.RDS')
